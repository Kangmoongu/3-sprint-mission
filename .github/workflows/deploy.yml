name: CD - Deploy

on:
  push:
    branches: [ release ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push Docker iamge
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ vars.ECR_REPOSITORY_URI }} : latest
            ${{ vars.ECR_REPOSITORY_URI }} : ${{ github.sha }}
          platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # 기존 태스크 정의 다운로드 및 새 이미지로 업데이트
      - name: Update task definition with new image
        run: |
          # 기존 태스크 정의 다운로드
          aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition' > task-def.json
          
          # 새 이미지 URI로 업데이트
          NEW_IMAGE="${{ vars.ECR_REPOSITORY_URI }}:latest"
          
          # 새 태스크 정의 등록
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ vars.ECS_TASK_DEFINITION }} \
            --task-role-arn $(jq -r '.taskRoleArn' task-def.json) \
            --execution-role-arn $(jq -r '.executionRoleArn' task-def.json) \
            --network-mode $(jq -r '.networkMode' task-def.json) \
            --cpu $(jq -r '.cpu' task-def.json) \
            --memory $(jq -r '.memory' task-def.json) \
            --requires-compatibilities $(jq -r '.requiresCompatibilities[]' task-def.json) \
            --container-definitions "$(jq --arg img "$NEW_IMAGE" '.[0].image = $img' task-def.json | jq -c '.[0:1]')" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF" >> $GITHUB_ENV

      # 프리티어 고려: 기존 서비스 중단 후 새 서비스 시작
      - name: Deploy to ECS (Free tier safe)
        run: |
          # 1. 기존 서비스 중단 (리소스 절약)
          echo "Stopping existing service..."
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --desired-count 0
          
          # 2. 서비스 중단 대기
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }}
          
          # 3. 새 태스크 정의로 서비스 업데이트 및 시작
          echo "Starting service with new task definition..."
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF_ARN \
            --desired-count 1
          
          # 4. 배포 완료 대기
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }}